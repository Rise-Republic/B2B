import { useState } from 'react';
import type { FC } from 'react';
import Step1_BasicInfo from './Step1_BasicInfo';
import Step2_ModelBuilder from '../Step2_ModelBuilder';
import Step3_NarrativeGeneration from './Step3_NarrativeGeneration';
import Step4_Composition from './Step4_Composition';
import type { DiscoveryResponse } from '../../services/b2bValueApi';

// Re-export TemplateContext from Step1_BasicInfo
export interface TemplateContext {
  industry: string;
  commonValueDrivers: string[];
  keyMetrics: string[];
}

interface WizardData {
  discoveryData: DiscoveryResponse | null;
  templateContext?: TemplateContext;
  quantificationData: any;
  narrativeData: any;
  userFeedback: any;
  compositionData: any;
}

type WizardStep = 1 | 2 | 3 | 4;

const STEPS = [
  { id: 1, name: 'Discovery', description: 'Identify value drivers' },
  { id: 2, name: 'Model', description: 'Build financial model' },
  { id: 3, name: 'Narrative', description: 'Craft your story' },
  { id: 4, name: 'Composition', description: 'Finalize and export' },
];

const BusinessCaseWizard: FC = () => {
  const [currentStep, setCurrentStep] = useState<WizardStep>(1);
  const [wizardData, setWizardData] = useState<WizardData>({
    discoveryData: null,
    templateContext: undefined,
    quantificationData: null,
    narrativeData: null,
    userFeedback: null,
    compositionData: null,
  });

  const handleStep1Complete = (data: { discoveryData: DiscoveryResponse; templateContext?: TemplateContext }) => {
    setWizardData((prev) => ({
      ...prev,
      discoveryData: data.discoveryData,
      templateContext: data.templateContext,
    }));
    setCurrentStep(2);
  };

  const handleStep2Complete = (quantificationData: any) => {
    setWizardData((prev) => ({ ...prev, quantificationData }));
    setCurrentStep(3);
  };

  const handleStep3Complete = (narrativeData: any, userFeedback: any) => {
    setWizardData((prev) => ({ ...prev, narrativeData, userFeedback }));
    setCurrentStep(4);
  };

  const handleStep4Complete = (compositionData: any) => {
    setWizardData((prev) => ({ ...prev, compositionData }));
    // Navigate to final results or completion
    console.log('Business Case Complete:', { ...wizardData, compositionData });
  };

  const handleStepNavigation = (targetStep: WizardStep) => {
    if (targetStep >= 1 && targetStep <= 4) {
      setCurrentStep(targetStep);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return <Step1_BasicInfo onNext={handleStep1Complete} />;
      case 2:
        return (
          <Step2_ModelBuilder
            onNext={handleStep2Complete}
            discoveryData={wizardData.discoveryData}
            templateContext={wizardData.templateContext}
            onNavigate={handleStepNavigation}
          />
        );
      case 3:
        return (
          <Step3_NarrativeGeneration
            discoveryData={wizardData.discoveryData}
            quantificationData={wizardData.quantificationData}
            onNext={handleStep3Complete}
            onNavigate={handleStepNavigation}
          />
        );
      case 4:
        return (
          <Step4_Composition
            discoveryData={wizardData.discoveryData}
            quantificationData={wizardData.quantificationData}
            narrativeData={wizardData.narrativeData}
            onNext={handleStep4Complete}
            onNavigate={handleStepNavigation}
          />
        );
      default:
        return <div>Invalid step</div>;
    }
  };

  // Calculate progress percentage based on current step
  const progress = ((currentStep - 1) / (STEPS.length - 1)) * 100;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-8 px-4">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="mb-2 flex justify-between text-sm font-medium text-gray-700">
            <span>Step {currentStep} of {STEPS.length}</span>
            <span>{STEPS[currentStep - 1]?.name}</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2.5">
            <div 
              className="bg-blue-600 h-2.5 rounded-full transition-all duration-300" 
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>
        
        {/* Main Content */}
        <div className="bg-white rounded-lg shadow p-6">
          {renderStep()}
        </div>
        
        {/* Step Navigation */}
        <div className="mt-6 flex justify-between">
          <button
            onClick={() => handleStepNavigation((currentStep - 1) as WizardStep)}
            disabled={currentStep === 1}
            className={`px-4 py-2 rounded-md ${
              currentStep === 1 
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed' 
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
          >
            Previous
          </button>
          <div className="text-sm text-gray-600 flex items-center">
            {STEPS[currentStep - 1]?.description}
          </div>
          <button
            onClick={() => handleStepNavigation((currentStep + 1) as WizardStep)}
            disabled={currentStep === STEPS.length}
            className={`px-4 py-2 rounded-md ${
              currentStep === STEPS.length 
                ? 'bg-gray-200 text-gray-500 cursor-not-allowed' 
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
          >
            {currentStep === STEPS.length ? 'Complete' : 'Next'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default BusinessCaseWizard;
